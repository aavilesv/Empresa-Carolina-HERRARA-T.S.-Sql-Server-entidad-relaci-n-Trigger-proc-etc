
use Angelo
GO
CREATE database EMPRESAOPTIMIZAR

GO
USE EMPRESAOPTIMIZAR
GO
CREATE TABLE EMCARGOEMPLEADO
(IDCARGO INT PRIMARY KEY,NOMBRE VARCHAR(30))


CREATE TABLE EMEMPLEADO
(IDEMPLEADO INT PRIMARY KEY ,
NOMBRE VARCHAR(100),DIRECION VARCHAR(30),EDAD INT CHECK(EDAD >=18), CELULAR VARCHAR(10),
IDCARGO INT FOREIGN KEY REFERENCES EMCARGOEMPLEADO(IDCARGO),DNI varchar(10), EMAIL VARCHAR(50),
SEXO INT, SALARIO REAL
)


CREATE TABLE EMCLIENTE
(IDCLIENTE INT PRIMARY KEY ,
NOMBRE VARCHAR(100)NOT NULL,DNI VARCHAR(10) NOT NULL,SEXO INT,TELEFONO
VARCHAR(10))

CREATE TABLE EMPROVEEDOR
(IDPROVEEDOR INT PRIMARY KEY,EMPRESA VARCHAR(20),DIRECCION VARCHAR(20),
TELEFONO VARCHAR(10),CORREO VARCHAR(30)
)
CREATE TABLE EMTIPO 
(IDTIPO INT PRIMARY KEY ,
NOMBRE VARCHAR(20))

CREATE TABLE EMMATERIAL
(IDMATERIAL INT PRIMARY KEY ,
NOMBRE VARCHAR(40) , 
IDTIPO INT FOREIGN KEY REFERENCES EMTIPO(IDTIPO),ESTADO BIT,STOCK  INT)

CREATE TABLE EMCOMPRA
(IDCOMPRA INT PRIMARY KEY,
IDPROVEEDOR INT FOREIGN KEY REFERENCES 
EMPROVEEDOR (IDPROVEEDOR),PRECIO REAL check(PRECIO>0)
,FECHACOMPRA
DATETIME DEFAULT GETDATE())

CREATE TABLE EMDETALLECOMPRA
(IDCOMPRA INT CONSTRAINT FK_CONTRA FOREIGN KEY REFERENCES EMCOMPRA(IDCOMPRA),
IDMATERIAL INT CONSTRAINT FK_ARTICUL FOREIGN KEY REFERENCES EMMATERIAL(IDMATERIAL),
CANTIDAD INT
)


CREATE TABLE EMARTICULO
(IDARTICULO INT CONSTRAINT PK_IDARTICULO PRIMARY KEY,
NOMBRE VARCHAR(20), IDTIPO INT FOREIGN KEY 
REFERENCES EMTIPO (IDTIPO),PRECIO REAL check(PRECIO>0), 
IVA DECIMAL(18,2) , MODELO VARCHAR(800),ESTADO BIT, STOCK INT
)


CREATE TABLE EMVENTA
(IDVENTA INT CONSTRAINT PK_VENTA PRIMARY KEY,

IDCLIENTE INT FOREIGN KEY REFERENCES EMCLIENTE
(IDCLIENTE),IDEMPLEADO INT FOREIGN KEY REFERENCES EMEMPLEADO(IDEMPLEADO),
 SUBTOTAL REAL, TOTAL REAL, FECHA DATETIME 
)

CREATE TABLE EMDETALLEVENTA
(IDVENTA INT FOREIGN KEY REFERENCES EMVENTA(IDVENTA)
,CANTIDAD INT  check(CANTIDAD>0),IDARTICULO INT FOREIGN KEY REFERENCES EMARTICULO (IDARTICULO)
)

CREATE TABLE EMRUBRO
(
  IDRUBRO INT PRIMARY KEY,
  NOMBRE VARCHAR(50) UNIQUE,
  VALOR REAL 
)

CREATE TABLE EMSUELDO
(
  IDSUELDO INT PRIMARY KEY,
  FREG DATE DEFAULT GETDATE(),
  IDEMP INT REFERENCES EMEMPLEADO(IDEMPLEADO),
  IDRUBRO INT REFERENCES EMRUBRO(IDRUBRO),
  VALOR REAL
)
GO
--INSERCION DE LOS RUBROS
INSERT INTO EMRUBRO VALUES(1,'Sueldo',1.00)
INSERT INTO EMRUBRO VALUES(2,'IESS',0.20)
INSERT INTO EMRUBRO VALUES(3,'Cooperativa',0.10)
INSERT INTO EMRUBRO VALUES(4,'Seguro CONTRA QUEMADURAS',0.06)
GO


--CREACION DE LOS INDICES UNICOS EN LAS TABLAS  

CREATE UNIQUE INDEX IX_detalleventa ON EMDETALLEVENTA(IDVENTA,IDARTICULO);
CREATE UNIQUE INDEX IX_DETA ON EMDETALLECOMPRA(IDCOMPRA,IDMATERIAL);
CREATE UNIQUE INDEX IX_MATERIAL ON EMMATERIAL(NOMBRE,IDTIPO);
CREATE UNIQUE INDEX IX_TIPO ON EMTIPO(NOMBRE);
CREATE UNIQUE INDEX IX_ARITUCLO ON EMARTICULO(NOMBRE);
CREATE UNIQUE INDEX IX_CARGO ON EMCARGOEMPLEADO(NOMBRE);
create unique  index IX_DNIEMPL  ON EMEMPLEADO(DNI);
create unique   index IX_NOMEMPLE ON EMEMPLEADO(NOMBRE);
create unique  index  IX_DNIEMCL ON EMCLIENTE(DNI);
create unique  index IX_NOMEMCLI ON EMCLIENTE(NOMBRE);
create unique  index  IX_NOMEMPRO ON EMPROVEEDOR(EMPRESA);

create unique  index  IX_NOMEMPRESA ON EMPROVEEDOR(EMPRESA);
create unique  index IX_NOMEMTIPO ON EMTIPO(NOMBRE);
--CREACION DE INDICES REPETIDOS EN LAS TABLAS 


CREATE  INDEX ID_COMPRA ON EMCOMPRA (FECHACOMPRA);
CREATE  INDEX ID_TELEFONO ON EMCLIENTE (TELEFONO);
CREATE INDEX ID_CELULAR ON EMEMPLEADO(CELULAR);

GO

--CREACIÓN DEL TRIGGER CON CURSOR
CREATE TRIGGER TR_sueldo
ON EMEMPLEADO AFTER INSERT
AS
begin try 
begin tran
DECLARE @CUR INT       --DECLARAMOS UNA VARIABLE PARA QUE NOS RECIBA CUANDO SE INSERTE UN VALOR EN SALARIO
DECLARE @SALARIO REAL   --VARIABLE DE SALARIO
DECLARE @IDRUBRO INT
SELECT @CUR = IDEMPLEADO, @SALARIO = SALARIO FROM INSERTED
DECLARE @VALOR REAL
DECLARE CURSO CURSOR	--DECLARAMOS EL CURSOR QUE NOS RECORRE EL TRIGGER 
FOR SELECT IDRUBRO,VALOR FROM EMRUBRO			--REALIZAMOS UN FOR PARA QUE NOS RECORRA LA TABLA RUBRO CON Y TRAEGA SUS RESPECTIVOS VALORES
OPEN CURSO
FETCH CURSO INTO @IDRUBRO,@VALOR
WHILE @@FETCH_STATUS = 0
BEGIN
   DECLARE @IDSUELDO INT					--DECLARAMOS EL ID DE LA TABLA SUELDO
   SELECT @IDSUELDO = ISNULL(MAX(IDSUELDO)+1,1) FROM EMSUELDO			
   INSERT INTO EMSUELDO VALUES(@IDSUELDO,GETDATE(),@CUR,@IDRUBRO,(@VALOR*@SALARIO))  --SE INSERTAN LOS DATOS EN LA TABLA SUELDO
   FETCH CURSO INTO @IDRUBRO,@VALOR
END
CLOSE CURSO
deallocate CURSO
COMMIT TRAN
end TRY

begin CATCH
CLOSE CURSO
deallocate CURSO
ROLLBACK 
select ERROR_MESSAGE()
end CATCH
GO

--INSERTAR PROVEEDOR

INSERT EMPROVEEDOR VALUES(1,'_NIcovi','Guayaquil','2711264','nicoviasd@gmail.com')
INSERT EMPROVEEDOR VALUES(2,'tutuven','milagro','2782032','tituvend@gmail.com')
INSERT EMPROVEEDOR VALUES(3,'ALIA','milagro','278952','MARLENEORTIZ@gmail.com')
SELECT *from EMPROVEEDOR
---INSERTAR DATOS TIPO
INSERT EMTIPO VALUES(1,'ACERO'),(2,'HIERRO'),(3,'ALUMINIO'),(4,'ESMALTE')
SELECT *fROM EMTIPO
---INSERTAR MATERIAL

INSERT EMMATERIAL VALUES(1,'LATA',1,1,30),(2,'TUBOS',3,1,50),(3,'planchas',2,1,30),(4,'PINTURA',4,1,65)
SELECT *FROM EMMATERIAL
--INSERT 

INSERT EMCOMPRA VALUES (1,1,400,DATEADD(YEAR,2,GETDATE()))
INSERT EMCOMPRA VALUES (2,2,700,DATEADD(MONTH,20,GETDATE()))
INSERT EMCOMPRA VALUES (3,3,700,DATEADD(MONTH,20,GETDATE()))
INSERT EMCOMPRA VALUES (4,3,30,DATEADD(MONTH,60,GETDATE()))
SELECT *from EMCOMPRA

--insert detallecompra
INSERT EMDETALLECOMPRA VALUES (1,1,20),(1,2,10),(1,3,20)
INSERT EMDETALLECOMPRA VALUES (2,3,16),(2,2,18),(2,1,15)
INSERT EMDETALLECOMPRA VALUES (3,1,20),(3,2,20),
(3,3,15)
INSERT EMDETALLECOMPRA VALUES (4,4,20)
SELECT *from EMDETALLECOMPRA



----INSERT ARICULO


insert EMARTICULO VALUES(1,UPPER ('PUERTA'),1,400,12,'',1,65)
insert EMARTICULO VALUES(2,UPPER ('venta'),3,100,12,'','TRUE',16)
 SELECT E.NOMBRE 'TIPO',M.NOMBRE 'MATERIAL' FROM EMTIPO E ,EMARTICULO M WHERE E.IDTIPO=M.IDTIPO
 
---INSERTAR CLIENTE  
GO
INSERT EMCLIENTE VALUES(1,UPPER('ANGELO MARCOS AVILES VALENZUELA'),'0927990242',2,'0969582383')
INSERT EMCLIENTE VALUES(2,UPPER('GISSELLE PRATRICIA GUIJIJE VALENZUELA'),'0987202563',1,'096588329')
INSERT EMCLIENTE VALUES(3,UPPER('EMILY ODALIS SOTO MANUEL'),'0962354695',1,'0965436541')
SELECT *FROM EMCLIENTE
--INSERTAR CARGO DE EMPLEADO
INSERT EMCARGOEMPLEADO VALUES (1,UPPER('GERENTE')),(2,'EMPLEADO'),(3,'OFICAL')

SELECT *FROM EMCARGOEMPLEADO
--INSERTAR EMPLEADO 

INSERT EMEMPLEADO VALUES 
(1,'PAOLA VERONICA VILLARES VERDUGO','BUCAY',20,'0927990245',1,'0365469853','Paola1971@gmail.com',1,600 )


INSERT EMEMPLEADO VALUES 
(2,'CAROLINA MANA ARJONA VERDUGO','DURAN',30,'0927565652',2,'0925874563','CAROLINA1971@gmail.com',1,400)
INSERT EMEMPLEADO VALUES 
(3,'ANDY WILLIAM MONTAÑEZ CORTEZ','BABAHOYO',18,'0923654899',2,'0256987452','ANDYMONTAÑE1@gmail.com',2,400)
SELECT *FROM EMEMPLEADO
--VENTA INSERTAR

INSERT EMVENTA VALUES(1,3,1,400,500,GETDATE())
INSERT EMVENTA VALUES(2,2,1,800,1000,'2019/02/03')
INSERT EMVENTA VALUES(3,1,2,1000,1060,'2015/02/03')
INSERT EMVENTA VALUES(4,1,2,300,400,'2015/02/09')
SELECT *FROM EMVENTA
--INSERTAR DETALLEVENTA

INSERT EMDETALLEVENTA VALUES (1,2,2),(1,1,1),(2,3,1),(2,1,2)
INSERT EMDETALLEVENTA VALUES (3,2,2),(3,1,1)
INSERT EMDETALLEVENTA VALUES (4,2,2),(4,1,1)
SELECT *FROM EMDETALLEVENTA


/*
PROCEDIMIENTOS ALMACENADOS
Si el sistema emplea procedimientos 
para manipular datos, para un proceso 
transaccional y para obtener datos con parámetros de salida*/
--CREACION DE PROC DE LA TABLA CARGO DE EMPLEADO 
GO 
CREATE PROC SP_CARGO 
@ID INT
, @NOMBRE VARCHAR(30),
@OP VARCHAR(3)
AS 
BEGIN TRY
BEGIN TRAN 
IF @OP='INS'
BEGIN
INSERT EMCARGOEMPLEADO VALUES(isnull((SELECT max(IDCARGO)FROM EMCARGOEMPLEADO)+1,1),UPPER(@NOMBRE))
END
IF @OP='MOD'
BEGIN
UPDATE EMCARGOEMPLEADO SET NOMBRE=UPPER(@NOMBRE) WHERE IDCARGO=@ID
END
IF @OP='ELI'
BEGIN
DELETE FROM EMCARGOEMPLEADO WHERE IDCARGO=@ID
END
COMMIT TRAN
END TRY 
BEGIN CATCH 
ROLLBACK TRAN
SELECT ERROR_MESSAGE();
END CATCH 

GO
EXEC SP_CARGO 0,'NOT ALONE','INS'
--EXEC SP_CARGO 0,'REOFICAL','MOD'
--CREACION PROC DE EMPLEADO
GO 

CREATE PROC SP_EMPLEADO
@IDEM INT, 
@NOMBRE VARCHAR(100),
@DIRECCION VARCHAR(20),@EDAD INT, @CELULAR VARCHAR(10),
@IDCARGO INT ,
@DNI VARCHAR(10),
@EMAIL VARCHAR(20),@SEXO INT,@salario real,
@OP VARCHAR(3)
AS 
BEGIN TRY 
BEGIN  TRAN 
IF @OP='INS'
SELECT *fROM EMEMPLEADO
BEGIN 
INSERT INTO EMEMPLEADO VALUES(isnull((SELECT max(IDEMPLEADO)FROM EMEMPLEADO)+1,1),UPPER(@NOMBRE),UPPER(@DIRECCION),@EDAD,@CELULAR,@IDCARGO,@DNI,@EMAIL,@SEXO,@salario)
END
IF @OP='MOD'
BEGIN
UPDATE EMEMPLEADO SET NOMBRE=UPPER(@NOMBRE),DIRECION=@DIRECCION,
EDAD=@EDAD,CELULAR=@CELULAR,IDCARGO=@IDCARGO,DNI=@DNI,
EMAIL=@EMAIL,SEXO=@SEXO,SALARIO=@salario WHERE IDEMPLEADO=@IDEM
END
IF @OP='ELI'
BEGIN
DELETE FROM EMEMPLEADO WHERE IDEMPLEADO=@IDEM
END
COMMIT TRAN 
END TRY 
BEGIN CATCH 
ROLLBACK TRAN
SELECT STR(ERROR_NUMBER())+ERROR_MESSAGE();
END CATCH
GO
EXEC SP_EMPLEADO 0,'TONY DIZE','CITY',20,'9912782389',1,'092456562','TONY@gmail.com',2,233,'INS'

---CREACION DE PROCEDIMIENTOS ALMACENADOS DE LA TABLA CLIENTE
GO

CREATE PROC SP_CLIENTE
@IDCLIENTE INT,
@NOMBRE VARCHAR(100),
@DNI VARCHAR(10),
@SEXO INT,@TELOFONO VARCHAR(10),

 @OP VARCHAR(3)
AS
BEGIN TRY
BEGIN TRAN 
IF @OP='INS'
BEGIN
INSERT INTO EMCLIENTE VALUES(isnull((SELECT max(IDCLIENTE)FROM EMCLIENTE)+1,1),UPPER(@NOMBRE),@DNI,@SEXO,@TELOFONO)
END
IF @OP='MOD'
BEGIN
UPDATE EMCLIENTE SET NOMBRE=UPPER(@NOMBRE) ,DNI=@DNI,SEXO=@SEXO,TELEFONO=@TELOFONO WHERE IDCLIENTE=@IDCLIENTE
END
IF @OP='ELI'
BEGIN 
DELETE FROM EMCLIENTE WHERE IDCLIENTE=@IDCLIENTE
END
COMMIT TRAN
END TRY 
BEGIN CATCH 
ROLLBACK TRANSACTION
SELECT ERROR_MESSAGE()+'DATO YA REPETIDO' +STR(ERROR_NUMBER());
END CATCH
GO

EXEC SP_CLIENTE 0,'BRIGGete velero','056455566',1,'123546987','INS'
--Creacion de vista para cada tabla y realaci

GO

CREATE PROC SP_PROVEEDOR 
@IDPROV INT ,@EMPRESA VARCHAR(20),@DIRECCION VARCHAR(20),
@TELEFONO VARCHAR(10),@CORREO VARCHAR(30),@OP VARCHAR(3)
AS 
BEGIN TRY 
BEGIN TRAN
IF @OP='INS'
BEGIN
SELECT *FROM EMPROVEEDOR
INSERT EMPROVEEDOR VALUES(isnull((SELECT max(IDPROVEEDOR)FROM EMPROVEEDOR)+1,1),UPPER(@EMPRESA),@DIRECCION,@TELEFONO,@CORREO)
END
IF @OP='MOD'
BEGIN 
UPDATE EMPROVEEDOR SET  EMPRESA=UPPER(@EMPRESA), DIRECCION=@DIRECCION, TELEFONO=@TELEFONO, 
 CORREO=@CORREO WHERE IDPROVEEDOR=@IDPROV
END
IF @OP='ELI'
BEGIN
DELETE FROM EMPROVEEDOR WHERE IDPROVEEDOR=@IDPROV
END
COMMIT TRAN
END TRY 
BEGIN CATCH 
ROLLBACK TRAN
SELECT ERROR_MESSAGE()+STR(ERROR_NUMBER())
END CATCH
GO
SELECT *FROM EMPROVEEDOR
EXEC SP_PROVEEDOR 4,'CRUZ AZUL','LOS ANGELES','071126426','MAITHE7111264@gmail.com','ELI'
SELECT *FROM EMPROVEEDOR
--CREACION DE PROCEDIMIENTO PARA TIPO DE MATERIAL
GO 
CREATE PROC SP_TIPO
@IDTIPO INT , @NOMBRE VARCHAR(20),@OP VARCHAR(3)
AS
BEGIN TRY 
BEGIN TRAN 
IF @OP='INS'
BEGIN 
INSERT EMTIPO VALUES(isnull((SELECT max(IDTIPO)FROM EMTIPO)+1,1),UPPER(@NOMBRE))
END
IF @OP='MOD'
BEGIN 
UPDATE EMTIPO SET NOMBRE=UPPER(@NOMBRE) WHERE IDTIPO=@IDTIPO
END
IF @OP='ELI'
BEGIN
DELETE FROM EMTIPO WHERE IDTIPO=@IDTIPO
END
COMMIT TRAN
END TRY 
BEGIN CATCH 
ROLLBACK TRAN
SELECT ERROR_MESSAGE()+STR(ERROR_NUMBER())
END CATCH 
GO
EXEC SP_TIPO 0,'papel','INS'
--creacion procedimieno del material
GO 


--#6
CREATE PROC SP_EMMATERIAL
@IDMATERIAL INT , @NOMBRE VARCHAR(40), @IDTIPO INT,@OP VARCHAR(3),@ESTADO BIT,@STOCK INT
AS 
BEGIN TRY 
BEGIN TRAN 
IF @OP='INS'
BEGIN
INSERT EMMATERIAL VALUES(isnull((SELECT max(IDMATERIAL)FROM EMMATERIAL)+1,1),UPPER(@NOMBRE),@IDTIPO,@ESTADO,@STOCK )
END
IF @OP='MOD'
BEGIN 
UPDATE EMMATERIAL SET NOMBRE=UPPER(@NOMBRE), ESTADO=@ESTADO,STOCK =@STOCK WHERE  IDMATERIAL=@IDMATERIAL
END 

COMMIT TRAN
END TRY 
BEGIN CATCH 
ROLLBACK TRAN
SELECT ERROR_MESSAGE()+STR(ERROR_NUMBER())
END CATCH 
GO
EXEC SP_EMMATERIAL 0,'LASTRE',2,'INS',1,30
--creacion procedure 
--#7
GO
create proc SP_COMPRA 
@IDCOMPRA INT , @IDPROV INT,@PRECIO REAL  ,@FECHACOMPRA DATETIME, @OP  VARCHAR(3)
AS 
BEGIN TRY 
BEGIN TRAN
IF @OP='INS'
BEGIN
INSERT EMCOMPRA VALUES(isnull((SELECT max(IDCOMPRA)FROM EMCOMPRA)+1,1),@IDPROV,@PRECIO,@FECHACOMPRA)
END

COMMIT TRAN
END TRY
BEGIN CATCH
ROLLBACK TRAN 
SELECT ERROR_MESSAGE()
END CATCH
EXEC SP_COMPRA 0,1,345,GETDATE,'INS'
--CREACION DE PROCEDURE DE ARTICULO
GO--#8

CREATE PROC SP_ARTICULO
@IDARTICULO INT , @NOMBRE VARCHAR(20),@IDTIPO INT , @PRECIO REAL,
@IVA DECIMAL(18,2) ,@MODELO VARCHAR(100),@ESTADO BIT,@STOCK INT, @OP VARCHAR(3)
AS 
BEGIN TRY 
BEGIN TRAN 
IF @OP='INS'
BEGIN
INSERT EMARTICULO VALUES (isnull((SELECT max(IDARTICULO)FROM EMARTICULO)+1,1),UPPER(@NOMBRE),@IDTIPO,@PRECIO,@IVA,@MODELO,@ESTADO,@STOCK)

END
IF @OP='MOD'
BEGIN
UPDATE EMARTICULO SET NOMBRE=@NOMBRE, IDTIPO=@IDTIPO, PRECIO=@PRECIO, IVA=@IVA, MODELO=@MODELO,
 ESTADO=@ESTADO WHERE IDARTICULO=@IDARTICULO
END
COMMIT TRAN
END TRY 
BEGIN CATCH
ROLLBACK TRAN
SELECT ERROR_MESSAGE()
END CATCH
--#9
--CREACION DE PROCEDURE DE VENTA
GO
CREATE PROC SP_VENTA
@IDVENTA INT,@CLIENTE INT , @IDEMPLEADO INT,@SUBTOTAL REAL,@TOTAL REAL, @FECHA DATETIME, @OP VARCHAR(3)
AS 
BEGIN TRY 
BEGIN TRAN 
IF @OP='INS'
BEGIN
INSERT EMVENTA VALUES(isnull((SELECT max(IDVENTA)FROM EMVENTA)+1,1),@CLIENTE,@IDEMPLEADO,@SUBTOTAL,@TOTAL,@FECHA)
END

COMMIT TRAN
END TRY 
BEGIN CATCH
ROLLBACK TRAN
SELECT ERROR_MESSAGE()
END CATCH
GO
EXEC SP_VENTA 5,2,1,232,300,'2018/09/20','INS'
--10
--CREACION DE PROCEDURE DE DETALLEVENTA
GO
CREATE PROC SP_DETALLEVENTA
@IDVENTA INT, @IDARTICULO INT,@CANTIDAD INT, @OP VARCHAR(3)
AS 
BEGIN TRY 
BEGIN TRAN 
IF @OP='INS'
BEGIN
INSERT EMDETALLEVENTA VALUES(@IDVENTA,@CANTIDAD,@IDARTICULO)
END 
COMMIT TRAN
END TRY 
BEGIN CATCH
ROLLBACK TRAN
SELECT ERROR_MESSAGE()
END CATCH
GO
EXEC SP_DETALLEVENTA 5,1,20,'INS'
--11
--CREACION DE PROCEDURE DE DETALLECOMPRA
GO
CREATE PROC SP_DETALLECOMPRA
@IDCOMPRA INT, @IDMATERIAL INT,@CANTIDAD INT, @OP VARCHAR(3)
AS 
BEGIN TRY 
BEGIN TRAN 
IF @OP='INS'
BEGIN
INSERT EMDETALLECOMPRA VALUES(@IDCOMPRA,@IDMATERIAL,@CANTIDAD)
END
COMMIT TRAN
END TRY 
BEGIN CATCH
ROLLBACK TRAN
SELECT ERROR_MESSAGE()
END CATCH
GO
EXEC SP_DETALLECOMPRA 5,1,20,'INS'
--CREACION DE PARAMETROS CON VARIABLES DE SALIDA
GO
--PARA VER QUE MATERIAL ES MAS COMPRADO
CREATE proc SP_TipoMATERIAL
@ID int, @Nombre varchar(30)output,@Total int output
as 
begin try
begin tran
begin 
SELECT @Nombre= M.NOMBRE, @Total=SUM(DE.CANTIDAD)  FROM EMCOMPRA C JOIN EMDETALLECOMPRA DE ON C.IDCOMPRA=DE.IDCOMPRA
 JOIN EMMATERIAL M ON DE.IDMATERIAL=M.IDMATERIAL where m.IDMATERIAL=@ID GROUP BY M.NOMBRE ORDER BY m.NOMBRE
 
end
commit TRAN 
end TRY
BEGIN CATCH 
ROLLBACK TRAN
SELECT error_message()
END CATCH
GO
DECLARE @Nombre varchar(30) ;
DECLARE @Total VARCHAR (200);
DECLARE @ID INT=1;
exec SP_TipoMATERIAL @ID,@Nombre OUTPUT ,@Total OUTPUT
SELECT ('El material:'+@Nombre+ ': con un total de:' + STR(@Total))AS Comprado
GO
--VER EL TIPO DE ARTICULO MAS VENDIDO
CREATE proc SP_TipoArticulo
@ID int, @Nombre varchar(30)output,@Total int output
as 
begin try 
begin tran
begin 
SELECT @Nombre= A.NOMBRE , @Total=SUM(D.CANTIDAD) FROM EMARTICULO A, EMDETALLEVENTA D 
 ,EMVENTA V WHERE A.IDARTICULO=D.IDARTICULO  AND D.IDVENTA=V.IDVENTA AND A.IDARTICULO=@ID GROUP BY A.NOMBRE
end
COMMIT TRAN
end TRY
begin CATCH
ROLLBACK
select error_message()
END CATCH
GO
DECLARE @Nombre varchar(30) ;
DECLARE @Total VARCHAR (200);
DECLARE @ID INT;
exec SP_TipoArticulo 1,@Nombre OUTPUT ,@Total OUTPUT
SELECT ('El ARITUCLO :'+@Nombre+ ': con un total de:' + @Total)AS VENDIDO
---VER POR FECHAS
GO
CREATE PROC SP_FECHAVENTA
@FECHAI DATE, @FECHAF DATE
AS
BEGIN
SELECT  C.NOMBRE ,SUM(V.TOTAL) [TOTAL] FROM EMVENTA V JOIN EMCLIENTE C ON V.IDCLIENTE=C.IDCLIENTE  
WHERE V.FECHA BETWEEN @FECHAI AND  @FECHAF GROUP BY C.NOMBRE 
 HAVING @FECHAF>=@FECHAI
 ORDER BY C.NOMBRE
END
GO

EXEC SP_FECHAVENTA '2018/02/11','2018/08/28'

/*
-----CONSULTAS  Y VISTAS 

Si el sistema emplea consultas
 con varias tablas, de agrupamiento, con cast,
  con funciones, con subconsultas, ya sea en forma 
  independiente o en vistas
*/
--CARGO VISTA
GO
CREATE VIEW V_CARGO 
AS
SELECT *FROM EMCARGOEMPLEADO 
GO

SELECT *FROM V_CARGO ORDER BY V_CARGO.IDCARGO ASC
--Vista de cliente 
GO
--EMPLEADO 
CREATE  VIEW V_EMPLEADO
AS 
SELECT IDEMPLEADO, E.NOMBRE, DIRECION, EDAD, CELULAR, 
C.NOMBRE [CARGO], DNI, EMAIL, CASE SEXO WHEN '1' THEN 'FEMENIMO'
WHEN '2' THEN 'MASCULINO'
END AS GENERO
FROM EMEMPLEADO E JOIN EMCARGOEMPLEADO C ON E.IDCARGO=C.IDCARGO
GO
SELECT * FROM V_EMPLEADO
GO 
--CLIENE VISTA
CREATE view V_Cliente 
as 
select IDCLIENTE, NOMBRE, DNI,  
case SEXO WHEN '2'
 THEN 'MASCULINO'
 WHEN '1' THEN 'FEMENIMO'  end AS GENERO, TELEFONO FROM EMCLIENTE
GO

SELECT *FROM V_Cliente
--VISTA PARA TIPO 
GO
CREATE VIEW V_TIPO
AS
SELECT *fROM EMTIPO 
GO
SELECT *fROM V_TIPO
GO
--MATERIAL #5 
SELECT IDARTICULO, NOMBRE FROM EMARTICULO
GO
CREATE VIEW V_MATERIAL 
AS

SELECT M.IDMATERIAL,M.NOMBRE [MATERIAL],T.NOMBRE [TIPO] FROM EMMATERIAL M JOIN EMTIPO T ON M.IDTIPO=T.IDTIPO 
GO
SELECT *FROM V_MATERIAL
GO
CREATE VIEW V_MATERIALSTOCK 
AS

SELECT M.IDMATERIAL,M.NOMBRE [MATERIAL],T.NOMBRE [TIPO],M.STOCK FROM EMMATERIAL M JOIN EMTIPO T ON M.IDTIPO=T.IDTIPO 
GO
SELECT *FROM V_MATERIALSTOCK
GO

--ARTICULO 
CREATE VIEW V_ARTICULO
AS
SELECT a.IDARTICULO,a.NOMBRE,c.NOMBRE [TIPO], a.IVA,a.PRECIO,a.MODELO,a.STOCK,a.ESTADO FROM EMARTICULO a JOIN EMTIPO c ON a.IDTIPO=c.IDTIPO

GO
SELECT *from V_ARTICULO 


GO
CREATE VIEW V_VENTA 
AS 

SELECT V.IDVENTA,C.NOMBRE CLIENTE,E.NOMBRE [VENTA] 
,V.SUBTOTAL,V.TOTAL,CONVERT(VARCHAR(30),V.FECHA) FECHA FROM EMVENTA V, EMCLIENTE C, EMEMPLEADO E
 WHERE V.IDCLIENTE=C.IDCLIENTE AND E.IDEMPLEADO=V.IDEMPLEADO
GO
SELECT *FROM V_VENTA
GO
CREATE VIEW VPAGO
AS
select e.NOMBRE 'EMPLEADO',s.VALOR,r.NOMBRE 'RUBRO' from EMSUELDO s ,EMRUBRO r, EMEMPLEADO e where s.IDRUBRO=r.IDRUBRO and e.IDEMPLEADO=s.IDEMP

GO
SELECT *fROM VPAGO 
GO


CREATE VIEW V_COMPRA
AS

SELECT C.IDCOMPRA, P.EMPRESA,C.PRECIO,CONVERT(VARCHAR(30),C.FECHACOMPRA) FECHA FROM EMCOMPRA C ,EMPROVEEDOR P 
 WHERE C.IDPROVEEDOR=P.IDPROVEEDOR
GO
SELECT *FROM V_COMPRA

GO



CREATE VIEW V_TOTALCOMPRADOCLIENTE
AS 
 SELECT C.NOMBRE,SUM(V.TOTAL) TOTAL FROM EMCLIENTE C JOIN EMVENTA V ON C.IDCLIENTE=V.IDCLIENTE GROUP BY C.NOMBRE
--VISTA PARA CLIENTE
GO
SELECT *FROM V_TOTALCOMPRADOCLIENTE
GO
CREATE VIEW V_PROVEERDOR
AS
SELECT *fROM EMPROVEEDOR
GO

SELECT *FROM V_PROVEERDOR 
GO
CREATE VIEW V_COMPRAALPROVEEDOR
AS 
SELECT P.EMPRESA, SUM(C.PRECIO) TOTAL FROM EMCOMPRA C JOIN EMPROVEEDOR P ON C.IDPROVEEDOR=P.IDPROVEEDOR
GROUP BY P.EMPRESA

GO
SELECT *FROM V_COMPRAALPROVEEDOR


GO
CREATE VIEW V_DETALLEVENTA
AS
SELECT V.IDVENTA,A.NOMBRE [ARTICULO],T.NOMBRE [TIPO],V.TOTAL ,D.CANTIDAD FROM EMDETALLEVENTA D 
JOIN EMVENTA V ON D.IDVENTA=V.IDVENTA JOIN EMARTICULO A ON D.IDARTICULO=A.IDARTICULO JOIN EMTIPO T ON A.IDTIPO=T.IDTIPO
GO
SELECT *FROM  V_DETALLEVENTA WHERE V_DETALLEVENTA.IDVENTA=1
GO
CREATE VIEW V_DETALLECOMPRA
AS 
SELECT C.IDCOMPRA, M.NOMBRE [MATERIAL],T.NOMBRE [TIPO],D.CANTIDAD
FROM EMCOMPRA C JOIN EMDETALLECOMPRA D ON C.IDCOMPRA=D.IDCOMPRA JOIN EMMATERIAL M ON D.IDMATERIAL=M.IDMATERIAL JOIN EMTIPO T 
ON M.IDTIPO=T.IDTIPO
GO
SELECT *FROM V_DETALLECOMPRA WHERE V_DETALLECOMPRA.IDCOMPRA=1
GO

/*Si utiliza al menos un cursor en un procedimiento
 almacenado para una transacción, presentación o manipulación de datos*/
 CREATE proc SP__Cursor
 @femenimo real output, @masculino real output
 as
 begin try 
 begin tran
 declare @valor REAL
 DECLARE @RECORRE REAL=0
 DECLARE @RECORREMAS REAL=0
 declare @sexo INT
 declare correr cursor for select c.SEXO,v.TOTAL from EMVENTA v , EMCLIENTE c where v.IDCLIENTE=c.IDCLIENTE
 OPEN correr
 FETCH correr into @sexo,@valor
 WHILE @@FETCH_STATUS=0
 BEGIN
IF @sexo=1
BEGIN

SET @RECORRE=@RECORRE+@valor
SELECT @femenimo=@RECORRE

END
ELSE
BEGIN
SET @RECORREMAS=@RECORREMAS+@valor
SELECT @masculino=@RECORREMAS
END
  FETCH correr into @sexo,@valor
 END
 close correr
 deallocate correr
 commit tran
 end try
 
 begin catch 
 CLOSE correr
 deallocate correr
 rollback tran
 select ERROR_MESSAGE()
 end catch 
 go
 DECLARE @femenimo real
 declare @masculino real
 EXEC SP__Cursor @femenimo output,@masculino output
SELECT ('FEMENIMO:'+STR(@femenimo)+ '$ :MASCULINO' + STR(@masculino)+'$')AS [VENDIDO EN GENERO]


 GO

 /*
 Si utiliza trigger para 
 una transacción en particular y 
 para la auditoria de al menos las tablas transaccionales
 */
 --EL STOCK EN COMPRAR 
CREATE trigger TR_SOTCKCOMPRASUMA on EMDETALLECOMPRA AFTER INSERT
as
begin
BEGIN TRY 
BEGIN TRAN
DECLARE @IDARTI INT
DECLARE @CANTIDAD INT 
SELECT @CANTIDAD=CANTIDAD,@IDARTI=IDMATERIAL FROM INSERTED
UPDATE EMMATERIAL SET  STOCK=STOCK+@CANTIDAD WHERE IDMATERIAL=@IDARTI
SET NOCOUNT ON;--EVITA QUE SE MUESTRE QUE SE HAYAN HECHO CAMBIOS
COMMIT TRAN
END TRY
BEGIN CATCH
ROLLBACK TRAN
SELECT ERROR_MESSAGE()
END CATCH
END
GO
--RESTA EL STOCK EN LA VENTA
CREATE trigger TR_SOTCKVENTARESTA on EMDETALLEVENTA AFTER INSERT
as
begin
BEGIN TRY 
BEGIN TRAN
DECLARE @IDARTI INT
DECLARE @CANTIDAD INT 
SELECT @CANTIDAD=CANTIDAD,@IDARTI=IDARTICULO FROM INSERTED
UPDATE EMARTICULO SET  STOCK=STOCK-@CANTIDAD WHERE IDARTICULO=@IDARTI
SET NOCOUNT ON;--EVITA QUE SE MUESTRE QUE SE HAYAN HECHO CAMBIOS
COMMIT TRAN
END TRY
BEGIN CATCH
ROLLBACK TRAN
SELECT ERROR_MESSAGE()
END CATCH
END
GO

CREATE TABLE AUDITORIA 
(USUARIO VARCHAR(50),HORA DATETIME, ACCION VARCHAR(100))
GO
CREATE TRIGGER TR_AUDITORIA ON EMCOMPRA AFTER INSERT
AS 
begin
BEGIN TRY 
BEGIN TRAN  
declare @var varchar(100)
DECLARE @IDARTI INT
DECLARE @CANT INT 
DECLARE @IDAR INT
Select @IDAR=IDPROVEEDOR from INSERTED
SELECT @var=EMPRESA from EMPROVEEDOR WHERE IDPROVEEDOR=@IDAR
INSERT AUDITORIA VALUES (SYSTEM_USER,GETDATE(),'EMPRESA COMPRO:'+@var+':'+'$'+STR((select PRECIO from INSERTED)))
COMMIT TRAN
END TRY
BEGIN CATCH
ROLLBACK TRAN
SELECT ERROR_MESSAGE()
END CATCH
SET NOCOUNT ON
END
GO
GO
CREATE TRIGGER TR_PARAVENTA ON EMVENTA AFTER INSERT
AS 
begin
BEGIN TRY 
BEGIN TRAN
declare @vare varchar(100)
DECLARE @IDARr INT
Select @IDARr=IDCLIENTE from INSERTED
SELECT @vare=NOMBRE from EMCLIENTE WHERE IDCLIENTE=@IDARr
INSERT AUDITORIA VALUES (SYSTEM_USER,GETDATE(),'EMPRESA VENDIO:'+@vare+':$'+STR((select TOTAL from INSERTED)))
COMMIT TRAN
END TRY
BEGIN CATCH
ROLLBACK TRAN
SELECT ERROR_MESSAGE()
END CATCH
SET NOCOUNT ON
END
GO
SELECT *from AUDITORIA


SELECT *FROM EMTIPO
INSERT EMARTICULO VALUES(3,'CAMA',2,500,14,'',1,60)



SELECT *fROM EMDETALLEVENTA
SELECT *FROM EMVENTA
INSERT EMCOMPRA VALUES(6,1,200,GETDATE())
SELECT *fROM EMCOMPRA

INSERT  EMDETALLECOMPRA VALUES(6,3,20)

SELECT *fROM EMDETALLECOMPRA

INSERT EMVENTA VALUES(6,1,2,300,500,'2015/02/09')

--INSERTAR DETALLEVENTA
SELECT *FROM EMDETALLEVENTA
INSERT EMDETALLEVENTA VALUES (6,1,2),(6,1,1)




 --ESTO ES PARA EL TRIGGE
--SET NOCOUNT ON;--EVITA QUE SE MUESTRE QUE SE HAYAN HECHO CAMBIOS



--proveedores insert
GO
select *FROM EMCLIENTE
--CLIENTE
select IDCLIENTE 'Nª', NOMBRE 'CLIENTE', DNI 'CEDULA',
 case SEXO WHEN '1' THEN 'FENMINDO' ELSE 'MASCULINO' END 'GENERO', TELEFONO FROM EMCLIENTE
 
 
 


 --  
 select *FROM sys.tables
 
 go
 

use [master]
create login gerent with password='12345'
use EMPRESAOPTIMIZAR
create user gerent for login gerent
create role administra authorization gerent
exec sp_addrolemember administra,gerentee


/*conceder permisos para manipular los datos
de la tabla creditos de la base de datos Ejemplo*/

grant insert,update,delete,SELECT on EMARTICULO to gerent
grant insert,update,delete,SELECT on EMCARGOEMPLEADO to gerent
grant insert,update,delete,SELECT on EMCLIENTE to gerent
grant insert,update,delete,SELECT on EMCOMPRA to gerent
grant insert,update,delete,SELECT on EMDETALLECOMPRA to gerent
grant insert,update,delete,SELECT on EMDETALLEVENTA to gerent
grant insert,update,delete,SELECT on EMEMPLEADO to gerent
grant insert,update,delete,SELECT on EMPROVEEDOR to gerent

grant insert,update,delete,SELECT on EMRUBRO to gerent
grant insert,update,delete,SELECT on EMSUELDO to gerent
grant insert,update,delete,SELECT on EMTIPO to gerent
grant insert,update,delete,SELECT on EMVENTA to gerent

select *from EMSUELDO

GO
use [master]
CREATE login trabaja with password='12345'
use EMPRESAOPTIMIZAR
CREATE user trabaja for login trabaja
create role oper authorization trabaja
exec sp_addrolemember oper,trabajadores

/*conceder permisos para manipular los datos
de la tabla creditos de la base de datos Ejemplo*/
grant insert,update,delete,SELECT on EMARTICULO to trabaja
grant SELECT on EMCARGOEMPLEADO to trabaja
grant insert,update,delete,SELECT on EMCLIENTE to trabaja
grant insert,SELECT on EMCOMPRA to trabaja
grant insert,SELECT on EMDETALLECOMPRA to trabaja
grant insert,SELECT on EMDETALLEVENTA to trabaja
grant insert,update,delete,SELECT on EMEMPLEADO to trabaja
grant select on EMPROVEEDOR to trabaja
grant SELECT on EMRUBRO to trabaja
grant SELECT on EMSUELDO to trabaja
grant SELECT on EMTIPO to trabaja
grant insert,SELECT on EMVENTA to trabaja



